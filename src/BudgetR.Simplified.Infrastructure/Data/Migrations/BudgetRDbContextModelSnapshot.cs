// <auto-generated />
using System;
using BudgetR.Simplified.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BudgetR.Simplified.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BudgetRDbContext))]
    partial class BudgetRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BudgetR.Simplified.Domain.Entities.BusinessTransactionActivity", b =>
                {
                    b.Property<long>("BusinessTransactionActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BusinessTransactionActivityId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.HasKey("BusinessTransactionActivityId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("BusinessTransactionActivities");

                    b.HasData(
                        new
                        {
                            BusinessTransactionActivityId = 1L,
                            CreatedAt = new DateTime(2024, 8, 31, 16, 2, 42, 165, DateTimeKind.Local).AddTicks(7454),
                            ProcessName = "Initial Seeding",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("BudgetR.Simplified.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("AuthenticationId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<long?>("BusinessTransactionActivityId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserHistory");
                                ttb
                                    .HasPeriodStart("CreatedAt")
                                    .HasColumnName("CreatedAt");
                                ttb
                                    .HasPeriodEnd("ModifiedAt")
                                    .HasColumnName("ModifiedAt");
                            }));

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            AuthenticationId = "",
                            BusinessTransactionActivityId = 1L,
                            FirstName = "System",
                            IsActive = false,
                            UserType = 0
                        });
                });

            modelBuilder.Entity("BudgetR.Simplified.Domain.Entities.BusinessTransactionActivity", b =>
                {
                    b.HasOne("BudgetR.Simplified.Domain.Entities.User", "User")
                        .WithOne("BusinessTransactionActivity")
                        .HasForeignKey("BudgetR.Simplified.Domain.Entities.BusinessTransactionActivity", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetR.Simplified.Domain.Entities.User", b =>
                {
                    b.Navigation("BusinessTransactionActivity");
                });
#pragma warning restore 612, 618
        }
    }
}
